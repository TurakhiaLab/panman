// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutation_annotation.proto

#include "mutation_annotation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace MAT {
constexpr nuc_mut::nuc_mut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(0u)
  , gap_position_(0u)
  , nucs_(uint64_t{0u})
  , condensed_(0u){}
struct nuc_mutDefaultTypeInternal {
  constexpr nuc_mutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~nuc_mutDefaultTypeInternal() {}
  union {
    nuc_mut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT nuc_mutDefaultTypeInternal _nuc_mut_default_instance_;
constexpr block_mut::block_mut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : condensed_block_mut_()
  , _condensed_block_mut_cached_byte_size_(0){}
struct block_mutDefaultTypeInternal {
  constexpr block_mutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_mutDefaultTypeInternal() {}
  union {
    block_mut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_mutDefaultTypeInternal _block_mut_default_instance_;
constexpr node::node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nuc_mutation_()
  , annotations_()
  , block_mutation_(nullptr){}
struct nodeDefaultTypeInternal {
  constexpr nodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~nodeDefaultTypeInternal() {}
  union {
    node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT nodeDefaultTypeInternal _node_default_instance_;
constexpr block::block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consensus_seq_()
  , _consensus_seq_cached_byte_size_(0)
  , chromosome_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(0u){}
struct blockDefaultTypeInternal {
  constexpr blockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~blockDefaultTypeInternal() {}
  union {
    block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT blockDefaultTypeInternal _block_default_instance_;
constexpr gap_list::gap_list(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , _position_cached_byte_size_(0)
  , condensed_()
  , _condensed_cached_byte_size_(0){}
struct gap_listDefaultTypeInternal {
  constexpr gap_listDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gap_listDefaultTypeInternal() {}
  union {
    gap_list _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gap_listDefaultTypeInternal _gap_list_default_instance_;
constexpr tree::tree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , blocks_()
  , newick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gaps_(nullptr){}
struct treeDefaultTypeInternal {
  constexpr treeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~treeDefaultTypeInternal() {}
  union {
    tree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT treeDefaultTypeInternal _tree_default_instance_;
}  // namespace MAT
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mutation_5fannotation_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mutation_5fannotation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mutation_5fannotation_2eproto = nullptr;

const uint32_t TableStruct_mutation_5fannotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::nuc_mut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::nuc_mut, position_),
  PROTOBUF_FIELD_OFFSET(::MAT::nuc_mut, gap_position_),
  PROTOBUF_FIELD_OFFSET(::MAT::nuc_mut, condensed_),
  PROTOBUF_FIELD_OFFSET(::MAT::nuc_mut, nucs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::block_mut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::block_mut, condensed_block_mut_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::node, nuc_mutation_),
  PROTOBUF_FIELD_OFFSET(::MAT::node, block_mutation_),
  PROTOBUF_FIELD_OFFSET(::MAT::node, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::block, block_id_),
  PROTOBUF_FIELD_OFFSET(::MAT::block, consensus_seq_),
  PROTOBUF_FIELD_OFFSET(::MAT::block, chromosome_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::gap_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::gap_list, position_),
  PROTOBUF_FIELD_OFFSET(::MAT::gap_list, condensed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MAT::tree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MAT::tree, newick_),
  PROTOBUF_FIELD_OFFSET(::MAT::tree, nodes_),
  PROTOBUF_FIELD_OFFSET(::MAT::tree, blocks_),
  PROTOBUF_FIELD_OFFSET(::MAT::tree, gaps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MAT::nuc_mut)},
  { 10, -1, -1, sizeof(::MAT::block_mut)},
  { 17, -1, -1, sizeof(::MAT::node)},
  { 26, -1, -1, sizeof(::MAT::block)},
  { 35, -1, -1, sizeof(::MAT::gap_list)},
  { 43, -1, -1, sizeof(::MAT::tree)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_nuc_mut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_block_mut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_gap_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MAT::_tree_default_instance_),
};

const char descriptor_table_protodef_mutation_5fannotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mutation_annotation.proto\022\003MAT\"R\n\007nuc_"
  "mut\022\020\n\010position\030\001 \001(\r\022\024\n\014gap_position\030\002 "
  "\001(\r\022\021\n\tcondensed\030\003 \001(\r\022\014\n\004nucs\030\004 \001(\004\"(\n\t"
  "block_mut\022\033\n\023condensed_block_mut\030\001 \003(\r\"g"
  "\n\004node\022\"\n\014nuc_mutation\030\001 \003(\0132\014.MAT.nuc_m"
  "ut\022&\n\016block_mutation\030\002 \001(\0132\016.MAT.block_m"
  "ut\022\023\n\013annotations\030\003 \003(\t\"I\n\005block\022\020\n\010bloc"
  "k_id\030\001 \001(\r\022\025\n\rconsensus_seq\030\002 \003(\r\022\027\n\017chr"
  "omosome_name\030\003 \001(\t\"/\n\010gap_list\022\020\n\010positi"
  "on\030\001 \003(\r\022\021\n\tcondensed\030\002 \003(\r\"i\n\004tree\022\016\n\006n"
  "ewick\030\001 \001(\t\022\030\n\005nodes\030\002 \003(\0132\t.MAT.node\022\032\n"
  "\006blocks\030\003 \003(\0132\n.MAT.block\022\033\n\004gaps\030\004 \001(\0132"
  "\r.MAT.gap_listb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mutation_5fannotation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mutation_5fannotation_2eproto = {
  false, false, 502, descriptor_table_protodef_mutation_5fannotation_2eproto, "mutation_annotation.proto", 
  &descriptor_table_mutation_5fannotation_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_mutation_5fannotation_2eproto::offsets,
  file_level_metadata_mutation_5fannotation_2eproto, file_level_enum_descriptors_mutation_5fannotation_2eproto, file_level_service_descriptors_mutation_5fannotation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mutation_5fannotation_2eproto_getter() {
  return &descriptor_table_mutation_5fannotation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mutation_5fannotation_2eproto(&descriptor_table_mutation_5fannotation_2eproto);
namespace MAT {

// ===================================================================

class nuc_mut::_Internal {
 public:
};

nuc_mut::nuc_mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.nuc_mut)
}
nuc_mut::nuc_mut(const nuc_mut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&condensed_) -
    reinterpret_cast<char*>(&position_)) + sizeof(condensed_));
  // @@protoc_insertion_point(copy_constructor:MAT.nuc_mut)
}

inline void nuc_mut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&condensed_) -
    reinterpret_cast<char*>(&position_)) + sizeof(condensed_));
}

nuc_mut::~nuc_mut() {
  // @@protoc_insertion_point(destructor:MAT.nuc_mut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void nuc_mut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void nuc_mut::ArenaDtor(void* object) {
  nuc_mut* _this = reinterpret_cast< nuc_mut* >(object);
  (void)_this;
}
void nuc_mut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void nuc_mut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void nuc_mut::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.nuc_mut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condensed_) -
      reinterpret_cast<char*>(&position_)) + sizeof(condensed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* nuc_mut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gap_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gap_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 condensed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          condensed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nucs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          nucs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* nuc_mut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.nuc_mut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 gap_position = 2;
  if (this->_internal_gap_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gap_position(), target);
  }

  // uint32 condensed = 3;
  if (this->_internal_condensed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_condensed(), target);
  }

  // uint64 nucs = 4;
  if (this->_internal_nucs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_nucs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.nuc_mut)
  return target;
}

size_t nuc_mut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.nuc_mut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
  }

  // uint32 gap_position = 2;
  if (this->_internal_gap_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gap_position());
  }

  // uint64 nucs = 4;
  if (this->_internal_nucs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nucs());
  }

  // uint32 condensed = 3;
  if (this->_internal_condensed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_condensed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData nuc_mut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    nuc_mut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*nuc_mut::GetClassData() const { return &_class_data_; }

void nuc_mut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<nuc_mut *>(to)->MergeFrom(
      static_cast<const nuc_mut &>(from));
}


void nuc_mut::MergeFrom(const nuc_mut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.nuc_mut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_gap_position() != 0) {
    _internal_set_gap_position(from._internal_gap_position());
  }
  if (from._internal_nucs() != 0) {
    _internal_set_nucs(from._internal_nucs());
  }
  if (from._internal_condensed() != 0) {
    _internal_set_condensed(from._internal_condensed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void nuc_mut::CopyFrom(const nuc_mut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.nuc_mut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nuc_mut::IsInitialized() const {
  return true;
}

void nuc_mut::InternalSwap(nuc_mut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(nuc_mut, condensed_)
      + sizeof(nuc_mut::condensed_)
      - PROTOBUF_FIELD_OFFSET(nuc_mut, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata nuc_mut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[0]);
}

// ===================================================================

class block_mut::_Internal {
 public:
};

block_mut::block_mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  condensed_block_mut_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.block_mut)
}
block_mut::block_mut(const block_mut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      condensed_block_mut_(from.condensed_block_mut_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MAT.block_mut)
}

inline void block_mut::SharedCtor() {
}

block_mut::~block_mut() {
  // @@protoc_insertion_point(destructor:MAT.block_mut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_mut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void block_mut::ArenaDtor(void* object) {
  block_mut* _this = reinterpret_cast< block_mut* >(object);
  (void)_this;
}
void block_mut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_mut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_mut::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.block_mut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condensed_block_mut_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_mut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 condensed_block_mut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_condensed_block_mut(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_condensed_block_mut(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* block_mut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.block_mut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 condensed_block_mut = 1;
  {
    int byte_size = _condensed_block_mut_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_condensed_block_mut(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.block_mut)
  return target;
}

size_t block_mut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.block_mut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 condensed_block_mut = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->condensed_block_mut_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _condensed_block_mut_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_mut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_mut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_mut::GetClassData() const { return &_class_data_; }

void block_mut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<block_mut *>(to)->MergeFrom(
      static_cast<const block_mut &>(from));
}


void block_mut::MergeFrom(const block_mut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.block_mut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  condensed_block_mut_.MergeFrom(from.condensed_block_mut_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_mut::CopyFrom(const block_mut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.block_mut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_mut::IsInitialized() const {
  return true;
}

void block_mut::InternalSwap(block_mut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  condensed_block_mut_.InternalSwap(&other->condensed_block_mut_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_mut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[1]);
}

// ===================================================================

class node::_Internal {
 public:
  static const ::MAT::block_mut& block_mutation(const node* msg);
};

const ::MAT::block_mut&
node::_Internal::block_mutation(const node* msg) {
  return *msg->block_mutation_;
}
node::node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nuc_mutation_(arena),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.node)
}
node::node(const node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nuc_mutation_(from.nuc_mutation_),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_mutation()) {
    block_mutation_ = new ::MAT::block_mut(*from.block_mutation_);
  } else {
    block_mutation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MAT.node)
}

inline void node::SharedCtor() {
block_mutation_ = nullptr;
}

node::~node() {
  // @@protoc_insertion_point(destructor:MAT.node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_mutation_;
}

void node::ArenaDtor(void* object) {
  node* _this = reinterpret_cast< node* >(object);
  (void)_this;
}
void node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void node::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nuc_mutation_.Clear();
  annotations_.Clear();
  if (GetArenaForAllocation() == nullptr && block_mutation_ != nullptr) {
    delete block_mutation_;
  }
  block_mutation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MAT.nuc_mut nuc_mutation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nuc_mutation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .MAT.block_mut block_mutation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_mutation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MAT.node.annotations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MAT.nuc_mut nuc_mutation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nuc_mutation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nuc_mutation(i), target, stream);
  }

  // .MAT.block_mut block_mutation = 2;
  if (this->_internal_has_block_mutation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_mutation(this), target, stream);
  }

  // repeated string annotations = 3;
  for (int i = 0, n = this->_internal_annotations_size(); i < n; i++) {
    const auto& s = this->_internal_annotations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MAT.node.annotations");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.node)
  return target;
}

size_t node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MAT.nuc_mut nuc_mutation = 1;
  total_size += 1UL * this->_internal_nuc_mutation_size();
  for (const auto& msg : this->nuc_mutation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string annotations = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotations_.size());
  for (int i = 0, n = annotations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotations_.Get(i));
  }

  // .MAT.block_mut block_mutation = 2;
  if (this->_internal_has_block_mutation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_mutation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*node::GetClassData() const { return &_class_data_; }

void node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<node *>(to)->MergeFrom(
      static_cast<const node &>(from));
}


void node::MergeFrom(const node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nuc_mutation_.MergeFrom(from.nuc_mutation_);
  annotations_.MergeFrom(from.annotations_);
  if (from._internal_has_block_mutation()) {
    _internal_mutable_block_mutation()->::MAT::block_mut::MergeFrom(from._internal_block_mutation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void node::CopyFrom(const node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node::IsInitialized() const {
  return true;
}

void node::InternalSwap(node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nuc_mutation_.InternalSwap(&other->nuc_mutation_);
  annotations_.InternalSwap(&other->annotations_);
  swap(block_mutation_, other->block_mutation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[2]);
}

// ===================================================================

class block::_Internal {
 public:
};

block::block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  consensus_seq_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.block)
}
block::block(const block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      consensus_seq_(from.consensus_seq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chromosome_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chromosome_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chromosome_name().empty()) {
    chromosome_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chromosome_name(), 
      GetArenaForAllocation());
  }
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:MAT.block)
}

inline void block::SharedCtor() {
chromosome_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chromosome_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
block_id_ = 0u;
}

block::~block() {
  // @@protoc_insertion_point(destructor:MAT.block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chromosome_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void block::ArenaDtor(void* object) {
  block* _this = reinterpret_cast< block* >(object);
  (void)_this;
}
void block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consensus_seq_.Clear();
  chromosome_name_.ClearToEmpty();
  block_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 consensus_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_consensus_seq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_consensus_seq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chromosome_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chromosome_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MAT.block.chromosome_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_id = 1;
  if (this->_internal_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_id(), target);
  }

  // repeated uint32 consensus_seq = 2;
  {
    int byte_size = _consensus_seq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_consensus_seq(), byte_size, target);
    }
  }

  // string chromosome_name = 3;
  if (!this->_internal_chromosome_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chromosome_name().data(), static_cast<int>(this->_internal_chromosome_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MAT.block.chromosome_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chromosome_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.block)
  return target;
}

size_t block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 consensus_seq = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->consensus_seq_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _consensus_seq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string chromosome_name = 3;
  if (!this->_internal_chromosome_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chromosome_name());
  }

  // uint32 block_id = 1;
  if (this->_internal_block_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_block_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block::GetClassData() const { return &_class_data_; }

void block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<block *>(to)->MergeFrom(
      static_cast<const block &>(from));
}


void block::MergeFrom(const block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  consensus_seq_.MergeFrom(from.consensus_seq_);
  if (!from._internal_chromosome_name().empty()) {
    _internal_set_chromosome_name(from._internal_chromosome_name());
  }
  if (from._internal_block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block::CopyFrom(const block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block::IsInitialized() const {
  return true;
}

void block::InternalSwap(block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  consensus_seq_.InternalSwap(&other->consensus_seq_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chromosome_name_, lhs_arena,
      &other->chromosome_name_, rhs_arena
  );
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[3]);
}

// ===================================================================

class gap_list::_Internal {
 public:
};

gap_list::gap_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  position_(arena),
  condensed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.gap_list)
}
gap_list::gap_list(const gap_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      condensed_(from.condensed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MAT.gap_list)
}

inline void gap_list::SharedCtor() {
}

gap_list::~gap_list() {
  // @@protoc_insertion_point(destructor:MAT.gap_list)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void gap_list::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gap_list::ArenaDtor(void* object) {
  gap_list* _this = reinterpret_cast< gap_list* >(object);
  (void)_this;
}
void gap_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gap_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gap_list::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.gap_list)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  condensed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gap_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 condensed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_condensed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_condensed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* gap_list::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.gap_list)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 position = 1;
  {
    int byte_size = _position_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_position(), byte_size, target);
    }
  }

  // repeated uint32 condensed = 2;
  {
    int byte_size = _condensed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_condensed(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.gap_list)
  return target;
}

size_t gap_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.gap_list)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 position = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->position_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 condensed = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->condensed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _condensed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData gap_list::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    gap_list::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*gap_list::GetClassData() const { return &_class_data_; }

void gap_list::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<gap_list *>(to)->MergeFrom(
      static_cast<const gap_list &>(from));
}


void gap_list::MergeFrom(const gap_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.gap_list)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  condensed_.MergeFrom(from.condensed_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void gap_list::CopyFrom(const gap_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.gap_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gap_list::IsInitialized() const {
  return true;
}

void gap_list::InternalSwap(gap_list* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  condensed_.InternalSwap(&other->condensed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gap_list::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[4]);
}

// ===================================================================

class tree::_Internal {
 public:
  static const ::MAT::gap_list& gaps(const tree* msg);
};

const ::MAT::gap_list&
tree::_Internal::gaps(const tree* msg) {
  return *msg->gaps_;
}
tree::tree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena),
  blocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MAT.tree)
}
tree::tree(const tree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newick().empty()) {
    newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newick(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gaps()) {
    gaps_ = new ::MAT::gap_list(*from.gaps_);
  } else {
    gaps_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MAT.tree)
}

inline void tree::SharedCtor() {
newick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gaps_ = nullptr;
}

tree::~tree() {
  // @@protoc_insertion_point(destructor:MAT.tree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void tree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  newick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gaps_;
}

void tree::ArenaDtor(void* object) {
  tree* _this = reinterpret_cast< tree* >(object);
  (void)_this;
}
void tree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void tree::Clear() {
// @@protoc_insertion_point(message_clear_start:MAT.tree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  blocks_.Clear();
  newick_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gaps_ != nullptr) {
    delete gaps_;
  }
  gaps_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string newick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MAT.tree.newick"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .MAT.node nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .MAT.block blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .MAT.gap_list gaps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* tree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAT.tree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string newick = 1;
  if (!this->_internal_newick().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newick().data(), static_cast<int>(this->_internal_newick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MAT.tree.newick");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newick(), target);
  }

  // repeated .MAT.node nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nodes(i), target, stream);
  }

  // repeated .MAT.block blocks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blocks(i), target, stream);
  }

  // .MAT.gap_list gaps = 4;
  if (this->_internal_has_gaps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gaps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAT.tree)
  return target;
}

size_t tree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAT.tree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MAT.node nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MAT.block blocks = 3;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string newick = 1;
  if (!this->_internal_newick().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newick());
  }

  // .MAT.gap_list gaps = 4;
  if (this->_internal_has_gaps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gaps_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData tree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    tree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*tree::GetClassData() const { return &_class_data_; }

void tree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<tree *>(to)->MergeFrom(
      static_cast<const tree &>(from));
}


void tree::MergeFrom(const tree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAT.tree)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  blocks_.MergeFrom(from.blocks_);
  if (!from._internal_newick().empty()) {
    _internal_set_newick(from._internal_newick());
  }
  if (from._internal_has_gaps()) {
    _internal_mutable_gaps()->::MAT::gap_list::MergeFrom(from._internal_gaps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void tree::CopyFrom(const tree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAT.tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tree::IsInitialized() const {
  return true;
}

void tree::InternalSwap(tree* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  blocks_.InternalSwap(&other->blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &newick_, lhs_arena,
      &other->newick_, rhs_arena
  );
  swap(gaps_, other->gaps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutation_5fannotation_2eproto_getter, &descriptor_table_mutation_5fannotation_2eproto_once,
      file_level_metadata_mutation_5fannotation_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MAT
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MAT::nuc_mut* Arena::CreateMaybeMessage< ::MAT::nuc_mut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::nuc_mut >(arena);
}
template<> PROTOBUF_NOINLINE ::MAT::block_mut* Arena::CreateMaybeMessage< ::MAT::block_mut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::block_mut >(arena);
}
template<> PROTOBUF_NOINLINE ::MAT::node* Arena::CreateMaybeMessage< ::MAT::node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::node >(arena);
}
template<> PROTOBUF_NOINLINE ::MAT::block* Arena::CreateMaybeMessage< ::MAT::block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::block >(arena);
}
template<> PROTOBUF_NOINLINE ::MAT::gap_list* Arena::CreateMaybeMessage< ::MAT::gap_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::gap_list >(arena);
}
template<> PROTOBUF_NOINLINE ::MAT::tree* Arena::CreateMaybeMessage< ::MAT::tree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MAT::tree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
