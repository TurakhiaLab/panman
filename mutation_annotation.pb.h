// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutation_annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mutation_5fannotation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mutation_5fannotation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mutation_5fannotation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mutation_5fannotation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mutation_5fannotation_2eproto;
namespace MAT {
class block_list;
struct block_listDefaultTypeInternal;
extern block_listDefaultTypeInternal _block_list_default_instance_;
class block_mut;
struct block_mutDefaultTypeInternal;
extern block_mutDefaultTypeInternal _block_mut_default_instance_;
class gap_list;
struct gap_listDefaultTypeInternal;
extern gap_listDefaultTypeInternal _gap_list_default_instance_;
class node;
struct nodeDefaultTypeInternal;
extern nodeDefaultTypeInternal _node_default_instance_;
class nuc_mut;
struct nuc_mutDefaultTypeInternal;
extern nuc_mutDefaultTypeInternal _nuc_mut_default_instance_;
class tree;
struct treeDefaultTypeInternal;
extern treeDefaultTypeInternal _tree_default_instance_;
}  // namespace MAT
PROTOBUF_NAMESPACE_OPEN
template<> ::MAT::block_list* Arena::CreateMaybeMessage<::MAT::block_list>(Arena*);
template<> ::MAT::block_mut* Arena::CreateMaybeMessage<::MAT::block_mut>(Arena*);
template<> ::MAT::gap_list* Arena::CreateMaybeMessage<::MAT::gap_list>(Arena*);
template<> ::MAT::node* Arena::CreateMaybeMessage<::MAT::node>(Arena*);
template<> ::MAT::nuc_mut* Arena::CreateMaybeMessage<::MAT::nuc_mut>(Arena*);
template<> ::MAT::tree* Arena::CreateMaybeMessage<::MAT::tree>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MAT {

// ===================================================================

class nuc_mut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.nuc_mut) */ {
 public:
  inline nuc_mut() : nuc_mut(nullptr) {}
  ~nuc_mut() override;
  explicit constexpr nuc_mut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nuc_mut(const nuc_mut& from);
  nuc_mut(nuc_mut&& from) noexcept
    : nuc_mut() {
    *this = ::std::move(from);
  }

  inline nuc_mut& operator=(const nuc_mut& from) {
    CopyFrom(from);
    return *this;
  }
  inline nuc_mut& operator=(nuc_mut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nuc_mut& default_instance() {
    return *internal_default_instance();
  }
  static inline const nuc_mut* internal_default_instance() {
    return reinterpret_cast<const nuc_mut*>(
               &_nuc_mut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(nuc_mut& a, nuc_mut& b) {
    a.Swap(&b);
  }
  inline void Swap(nuc_mut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nuc_mut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nuc_mut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nuc_mut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const nuc_mut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const nuc_mut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nuc_mut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.nuc_mut";
  }
  protected:
  explicit nuc_mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGapPositionFieldNumber = 2,
    kCondensedFieldNumber = 3,
    kNucsFieldNumber = 4,
  };
  // int32 position = 1;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // int32 gap_position = 2;
  void clear_gap_position();
  int32_t gap_position() const;
  void set_gap_position(int32_t value);
  private:
  int32_t _internal_gap_position() const;
  void _internal_set_gap_position(int32_t value);
  public:

  // int32 condensed = 3;
  void clear_condensed();
  int32_t condensed() const;
  void set_condensed(int32_t value);
  private:
  int32_t _internal_condensed() const;
  void _internal_set_condensed(int32_t value);
  public:

  // int32 nucs = 4;
  void clear_nucs();
  int32_t nucs() const;
  void set_nucs(int32_t value);
  private:
  int32_t _internal_nucs() const;
  void _internal_set_nucs(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MAT.nuc_mut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t position_;
  int32_t gap_position_;
  int32_t condensed_;
  int32_t nucs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class block_mut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.block_mut) */ {
 public:
  inline block_mut() : block_mut(nullptr) {}
  ~block_mut() override;
  explicit constexpr block_mut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_mut(const block_mut& from);
  block_mut(block_mut&& from) noexcept
    : block_mut() {
    *this = ::std::move(from);
  }

  inline block_mut& operator=(const block_mut& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_mut& operator=(block_mut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_mut& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_mut* internal_default_instance() {
    return reinterpret_cast<const block_mut*>(
               &_block_mut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(block_mut& a, block_mut& b) {
    a.Swap(&b);
  }
  inline void Swap(block_mut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_mut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  block_mut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<block_mut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_mut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_mut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_mut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.block_mut";
  }
  protected:
  explicit block_mut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCondensedBlockMutFieldNumber = 1,
  };
  // repeated int32 condensed_block_mut = 1;
  int condensed_block_mut_size() const;
  private:
  int _internal_condensed_block_mut_size() const;
  public:
  void clear_condensed_block_mut();
  private:
  int32_t _internal_condensed_block_mut(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_condensed_block_mut() const;
  void _internal_add_condensed_block_mut(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_condensed_block_mut();
  public:
  int32_t condensed_block_mut(int index) const;
  void set_condensed_block_mut(int index, int32_t value);
  void add_condensed_block_mut(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      condensed_block_mut() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_condensed_block_mut();

  // @@protoc_insertion_point(class_scope:MAT.block_mut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > condensed_block_mut_;
  mutable std::atomic<int> _condensed_block_mut_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.node) */ {
 public:
  inline node() : node(nullptr) {}
  ~node() override;
  explicit constexpr node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  node(const node& from);
  node(node&& from) noexcept
    : node() {
    *this = ::std::move(from);
  }

  inline node& operator=(const node& from) {
    CopyFrom(from);
    return *this;
  }
  inline node& operator=(node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node& default_instance() {
    return *internal_default_instance();
  }
  static inline const node* internal_default_instance() {
    return reinterpret_cast<const node*>(
               &_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(node& a, node& b) {
    a.Swap(&b);
  }
  inline void Swap(node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.node";
  }
  protected:
  explicit node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNucMutationFieldNumber = 1,
    kBlockMutationFieldNumber = 2,
  };
  // repeated .MAT.nuc_mut nuc_mutation = 1;
  int nuc_mutation_size() const;
  private:
  int _internal_nuc_mutation_size() const;
  public:
  void clear_nuc_mutation();
  ::MAT::nuc_mut* mutable_nuc_mutation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::nuc_mut >*
      mutable_nuc_mutation();
  private:
  const ::MAT::nuc_mut& _internal_nuc_mutation(int index) const;
  ::MAT::nuc_mut* _internal_add_nuc_mutation();
  public:
  const ::MAT::nuc_mut& nuc_mutation(int index) const;
  ::MAT::nuc_mut* add_nuc_mutation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::nuc_mut >&
      nuc_mutation() const;

  // .MAT.block_mut block_mutation = 2;
  bool has_block_mutation() const;
  private:
  bool _internal_has_block_mutation() const;
  public:
  void clear_block_mutation();
  const ::MAT::block_mut& block_mutation() const;
  PROTOBUF_NODISCARD ::MAT::block_mut* release_block_mutation();
  ::MAT::block_mut* mutable_block_mutation();
  void set_allocated_block_mutation(::MAT::block_mut* block_mutation);
  private:
  const ::MAT::block_mut& _internal_block_mutation() const;
  ::MAT::block_mut* _internal_mutable_block_mutation();
  public:
  void unsafe_arena_set_allocated_block_mutation(
      ::MAT::block_mut* block_mutation);
  ::MAT::block_mut* unsafe_arena_release_block_mutation();

  // @@protoc_insertion_point(class_scope:MAT.node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::nuc_mut > nuc_mutation_;
  ::MAT::block_mut* block_mutation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class block_list final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.block_list) */ {
 public:
  inline block_list() : block_list(nullptr) {}
  ~block_list() override;
  explicit constexpr block_list(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_list(const block_list& from);
  block_list(block_list&& from) noexcept
    : block_list() {
    *this = ::std::move(from);
  }

  inline block_list& operator=(const block_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_list& operator=(block_list&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_list* internal_default_instance() {
    return reinterpret_cast<const block_list*>(
               &_block_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(block_list& a, block_list& b) {
    a.Swap(&b);
  }
  inline void Swap(block_list* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  block_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<block_list>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_list& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_list& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_list* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.block_list";
  }
  protected:
  explicit block_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockidFieldNumber = 1,
    kChromosomeNameFieldNumber = 2,
  };
  // repeated int32 blockid = 1;
  int blockid_size() const;
  private:
  int _internal_blockid_size() const;
  public:
  void clear_blockid();
  private:
  int32_t _internal_blockid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockid() const;
  void _internal_add_blockid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockid();
  public:
  int32_t blockid(int index) const;
  void set_blockid(int index, int32_t value);
  void add_blockid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockid();

  // repeated int32 chromosome_name = 2;
  int chromosome_name_size() const;
  private:
  int _internal_chromosome_name_size() const;
  public:
  void clear_chromosome_name();
  private:
  int32_t _internal_chromosome_name(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chromosome_name() const;
  void _internal_add_chromosome_name(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chromosome_name();
  public:
  int32_t chromosome_name(int index) const;
  void set_chromosome_name(int index, int32_t value);
  void add_chromosome_name(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chromosome_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chromosome_name();

  // @@protoc_insertion_point(class_scope:MAT.block_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockid_;
  mutable std::atomic<int> _blockid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chromosome_name_;
  mutable std::atomic<int> _chromosome_name_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class gap_list final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.gap_list) */ {
 public:
  inline gap_list() : gap_list(nullptr) {}
  ~gap_list() override;
  explicit constexpr gap_list(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gap_list(const gap_list& from);
  gap_list(gap_list&& from) noexcept
    : gap_list() {
    *this = ::std::move(from);
  }

  inline gap_list& operator=(const gap_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline gap_list& operator=(gap_list&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gap_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const gap_list* internal_default_instance() {
    return reinterpret_cast<const gap_list*>(
               &_gap_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(gap_list& a, gap_list& b) {
    a.Swap(&b);
  }
  inline void Swap(gap_list* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gap_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gap_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<gap_list>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const gap_list& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const gap_list& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gap_list* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.gap_list";
  }
  protected:
  explicit gap_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kCondensedFieldNumber = 2,
  };
  // repeated int32 position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  int32_t _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_position() const;
  void _internal_add_position(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_position();
  public:
  int32_t position(int index) const;
  void set_position(int index, int32_t value);
  void add_position(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_position();

  // repeated int32 condensed = 2;
  int condensed_size() const;
  private:
  int _internal_condensed_size() const;
  public:
  void clear_condensed();
  private:
  int32_t _internal_condensed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_condensed() const;
  void _internal_add_condensed(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_condensed();
  public:
  int32_t condensed(int index) const;
  void set_condensed(int index, int32_t value);
  void add_condensed(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      condensed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_condensed();

  // @@protoc_insertion_point(class_scope:MAT.gap_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > condensed_;
  mutable std::atomic<int> _condensed_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// -------------------------------------------------------------------

class tree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAT.tree) */ {
 public:
  inline tree() : tree(nullptr) {}
  ~tree() override;
  explicit constexpr tree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tree(const tree& from);
  tree(tree&& from) noexcept
    : tree() {
    *this = ::std::move(from);
  }

  inline tree& operator=(const tree& from) {
    CopyFrom(from);
    return *this;
  }
  inline tree& operator=(tree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tree& default_instance() {
    return *internal_default_instance();
  }
  static inline const tree* internal_default_instance() {
    return reinterpret_cast<const tree*>(
               &_tree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(tree& a, tree& b) {
    a.Swap(&b);
  }
  inline void Swap(tree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAT.tree";
  }
  protected:
  explicit tree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kNewickFieldNumber = 1,
    kGapsFieldNumber = 3,
    kBlocksFieldNumber = 4,
  };
  // repeated .MAT.node nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::MAT::node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::node >*
      mutable_nodes();
  private:
  const ::MAT::node& _internal_nodes(int index) const;
  ::MAT::node* _internal_add_nodes();
  public:
  const ::MAT::node& nodes(int index) const;
  ::MAT::node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::node >&
      nodes() const;

  // string newick = 1;
  void clear_newick();
  const std::string& newick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newick();
  PROTOBUF_NODISCARD std::string* release_newick();
  void set_allocated_newick(std::string* newick);
  private:
  const std::string& _internal_newick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newick(const std::string& value);
  std::string* _internal_mutable_newick();
  public:

  // .MAT.gap_list gaps = 3;
  bool has_gaps() const;
  private:
  bool _internal_has_gaps() const;
  public:
  void clear_gaps();
  const ::MAT::gap_list& gaps() const;
  PROTOBUF_NODISCARD ::MAT::gap_list* release_gaps();
  ::MAT::gap_list* mutable_gaps();
  void set_allocated_gaps(::MAT::gap_list* gaps);
  private:
  const ::MAT::gap_list& _internal_gaps() const;
  ::MAT::gap_list* _internal_mutable_gaps();
  public:
  void unsafe_arena_set_allocated_gaps(
      ::MAT::gap_list* gaps);
  ::MAT::gap_list* unsafe_arena_release_gaps();

  // .MAT.block_list blocks = 4;
  bool has_blocks() const;
  private:
  bool _internal_has_blocks() const;
  public:
  void clear_blocks();
  const ::MAT::block_list& blocks() const;
  PROTOBUF_NODISCARD ::MAT::block_list* release_blocks();
  ::MAT::block_list* mutable_blocks();
  void set_allocated_blocks(::MAT::block_list* blocks);
  private:
  const ::MAT::block_list& _internal_blocks() const;
  ::MAT::block_list* _internal_mutable_blocks();
  public:
  void unsafe_arena_set_allocated_blocks(
      ::MAT::block_list* blocks);
  ::MAT::block_list* unsafe_arena_release_blocks();

  // @@protoc_insertion_point(class_scope:MAT.tree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newick_;
  ::MAT::gap_list* gaps_;
  ::MAT::block_list* blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mutation_5fannotation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// nuc_mut

// int32 position = 1;
inline void nuc_mut::clear_position() {
  position_ = 0;
}
inline int32_t nuc_mut::_internal_position() const {
  return position_;
}
inline int32_t nuc_mut::position() const {
  // @@protoc_insertion_point(field_get:MAT.nuc_mut.position)
  return _internal_position();
}
inline void nuc_mut::_internal_set_position(int32_t value) {
  
  position_ = value;
}
inline void nuc_mut::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:MAT.nuc_mut.position)
}

// int32 gap_position = 2;
inline void nuc_mut::clear_gap_position() {
  gap_position_ = 0;
}
inline int32_t nuc_mut::_internal_gap_position() const {
  return gap_position_;
}
inline int32_t nuc_mut::gap_position() const {
  // @@protoc_insertion_point(field_get:MAT.nuc_mut.gap_position)
  return _internal_gap_position();
}
inline void nuc_mut::_internal_set_gap_position(int32_t value) {
  
  gap_position_ = value;
}
inline void nuc_mut::set_gap_position(int32_t value) {
  _internal_set_gap_position(value);
  // @@protoc_insertion_point(field_set:MAT.nuc_mut.gap_position)
}

// int32 condensed = 3;
inline void nuc_mut::clear_condensed() {
  condensed_ = 0;
}
inline int32_t nuc_mut::_internal_condensed() const {
  return condensed_;
}
inline int32_t nuc_mut::condensed() const {
  // @@protoc_insertion_point(field_get:MAT.nuc_mut.condensed)
  return _internal_condensed();
}
inline void nuc_mut::_internal_set_condensed(int32_t value) {
  
  condensed_ = value;
}
inline void nuc_mut::set_condensed(int32_t value) {
  _internal_set_condensed(value);
  // @@protoc_insertion_point(field_set:MAT.nuc_mut.condensed)
}

// int32 nucs = 4;
inline void nuc_mut::clear_nucs() {
  nucs_ = 0;
}
inline int32_t nuc_mut::_internal_nucs() const {
  return nucs_;
}
inline int32_t nuc_mut::nucs() const {
  // @@protoc_insertion_point(field_get:MAT.nuc_mut.nucs)
  return _internal_nucs();
}
inline void nuc_mut::_internal_set_nucs(int32_t value) {
  
  nucs_ = value;
}
inline void nuc_mut::set_nucs(int32_t value) {
  _internal_set_nucs(value);
  // @@protoc_insertion_point(field_set:MAT.nuc_mut.nucs)
}

// -------------------------------------------------------------------

// block_mut

// repeated int32 condensed_block_mut = 1;
inline int block_mut::_internal_condensed_block_mut_size() const {
  return condensed_block_mut_.size();
}
inline int block_mut::condensed_block_mut_size() const {
  return _internal_condensed_block_mut_size();
}
inline void block_mut::clear_condensed_block_mut() {
  condensed_block_mut_.Clear();
}
inline int32_t block_mut::_internal_condensed_block_mut(int index) const {
  return condensed_block_mut_.Get(index);
}
inline int32_t block_mut::condensed_block_mut(int index) const {
  // @@protoc_insertion_point(field_get:MAT.block_mut.condensed_block_mut)
  return _internal_condensed_block_mut(index);
}
inline void block_mut::set_condensed_block_mut(int index, int32_t value) {
  condensed_block_mut_.Set(index, value);
  // @@protoc_insertion_point(field_set:MAT.block_mut.condensed_block_mut)
}
inline void block_mut::_internal_add_condensed_block_mut(int32_t value) {
  condensed_block_mut_.Add(value);
}
inline void block_mut::add_condensed_block_mut(int32_t value) {
  _internal_add_condensed_block_mut(value);
  // @@protoc_insertion_point(field_add:MAT.block_mut.condensed_block_mut)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_mut::_internal_condensed_block_mut() const {
  return condensed_block_mut_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_mut::condensed_block_mut() const {
  // @@protoc_insertion_point(field_list:MAT.block_mut.condensed_block_mut)
  return _internal_condensed_block_mut();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_mut::_internal_mutable_condensed_block_mut() {
  return &condensed_block_mut_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_mut::mutable_condensed_block_mut() {
  // @@protoc_insertion_point(field_mutable_list:MAT.block_mut.condensed_block_mut)
  return _internal_mutable_condensed_block_mut();
}

// -------------------------------------------------------------------

// node

// repeated .MAT.nuc_mut nuc_mutation = 1;
inline int node::_internal_nuc_mutation_size() const {
  return nuc_mutation_.size();
}
inline int node::nuc_mutation_size() const {
  return _internal_nuc_mutation_size();
}
inline void node::clear_nuc_mutation() {
  nuc_mutation_.Clear();
}
inline ::MAT::nuc_mut* node::mutable_nuc_mutation(int index) {
  // @@protoc_insertion_point(field_mutable:MAT.node.nuc_mutation)
  return nuc_mutation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::nuc_mut >*
node::mutable_nuc_mutation() {
  // @@protoc_insertion_point(field_mutable_list:MAT.node.nuc_mutation)
  return &nuc_mutation_;
}
inline const ::MAT::nuc_mut& node::_internal_nuc_mutation(int index) const {
  return nuc_mutation_.Get(index);
}
inline const ::MAT::nuc_mut& node::nuc_mutation(int index) const {
  // @@protoc_insertion_point(field_get:MAT.node.nuc_mutation)
  return _internal_nuc_mutation(index);
}
inline ::MAT::nuc_mut* node::_internal_add_nuc_mutation() {
  return nuc_mutation_.Add();
}
inline ::MAT::nuc_mut* node::add_nuc_mutation() {
  ::MAT::nuc_mut* _add = _internal_add_nuc_mutation();
  // @@protoc_insertion_point(field_add:MAT.node.nuc_mutation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::nuc_mut >&
node::nuc_mutation() const {
  // @@protoc_insertion_point(field_list:MAT.node.nuc_mutation)
  return nuc_mutation_;
}

// .MAT.block_mut block_mutation = 2;
inline bool node::_internal_has_block_mutation() const {
  return this != internal_default_instance() && block_mutation_ != nullptr;
}
inline bool node::has_block_mutation() const {
  return _internal_has_block_mutation();
}
inline void node::clear_block_mutation() {
  if (GetArenaForAllocation() == nullptr && block_mutation_ != nullptr) {
    delete block_mutation_;
  }
  block_mutation_ = nullptr;
}
inline const ::MAT::block_mut& node::_internal_block_mutation() const {
  const ::MAT::block_mut* p = block_mutation_;
  return p != nullptr ? *p : reinterpret_cast<const ::MAT::block_mut&>(
      ::MAT::_block_mut_default_instance_);
}
inline const ::MAT::block_mut& node::block_mutation() const {
  // @@protoc_insertion_point(field_get:MAT.node.block_mutation)
  return _internal_block_mutation();
}
inline void node::unsafe_arena_set_allocated_block_mutation(
    ::MAT::block_mut* block_mutation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_mutation_);
  }
  block_mutation_ = block_mutation;
  if (block_mutation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MAT.node.block_mutation)
}
inline ::MAT::block_mut* node::release_block_mutation() {
  
  ::MAT::block_mut* temp = block_mutation_;
  block_mutation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MAT::block_mut* node::unsafe_arena_release_block_mutation() {
  // @@protoc_insertion_point(field_release:MAT.node.block_mutation)
  
  ::MAT::block_mut* temp = block_mutation_;
  block_mutation_ = nullptr;
  return temp;
}
inline ::MAT::block_mut* node::_internal_mutable_block_mutation() {
  
  if (block_mutation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MAT::block_mut>(GetArenaForAllocation());
    block_mutation_ = p;
  }
  return block_mutation_;
}
inline ::MAT::block_mut* node::mutable_block_mutation() {
  ::MAT::block_mut* _msg = _internal_mutable_block_mutation();
  // @@protoc_insertion_point(field_mutable:MAT.node.block_mutation)
  return _msg;
}
inline void node::set_allocated_block_mutation(::MAT::block_mut* block_mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_mutation_;
  }
  if (block_mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MAT::block_mut>::GetOwningArena(block_mutation);
    if (message_arena != submessage_arena) {
      block_mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_mutation, submessage_arena);
    }
    
  } else {
    
  }
  block_mutation_ = block_mutation;
  // @@protoc_insertion_point(field_set_allocated:MAT.node.block_mutation)
}

// -------------------------------------------------------------------

// block_list

// repeated int32 blockid = 1;
inline int block_list::_internal_blockid_size() const {
  return blockid_.size();
}
inline int block_list::blockid_size() const {
  return _internal_blockid_size();
}
inline void block_list::clear_blockid() {
  blockid_.Clear();
}
inline int32_t block_list::_internal_blockid(int index) const {
  return blockid_.Get(index);
}
inline int32_t block_list::blockid(int index) const {
  // @@protoc_insertion_point(field_get:MAT.block_list.blockid)
  return _internal_blockid(index);
}
inline void block_list::set_blockid(int index, int32_t value) {
  blockid_.Set(index, value);
  // @@protoc_insertion_point(field_set:MAT.block_list.blockid)
}
inline void block_list::_internal_add_blockid(int32_t value) {
  blockid_.Add(value);
}
inline void block_list::add_blockid(int32_t value) {
  _internal_add_blockid(value);
  // @@protoc_insertion_point(field_add:MAT.block_list.blockid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_list::_internal_blockid() const {
  return blockid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_list::blockid() const {
  // @@protoc_insertion_point(field_list:MAT.block_list.blockid)
  return _internal_blockid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_list::_internal_mutable_blockid() {
  return &blockid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_list::mutable_blockid() {
  // @@protoc_insertion_point(field_mutable_list:MAT.block_list.blockid)
  return _internal_mutable_blockid();
}

// repeated int32 chromosome_name = 2;
inline int block_list::_internal_chromosome_name_size() const {
  return chromosome_name_.size();
}
inline int block_list::chromosome_name_size() const {
  return _internal_chromosome_name_size();
}
inline void block_list::clear_chromosome_name() {
  chromosome_name_.Clear();
}
inline int32_t block_list::_internal_chromosome_name(int index) const {
  return chromosome_name_.Get(index);
}
inline int32_t block_list::chromosome_name(int index) const {
  // @@protoc_insertion_point(field_get:MAT.block_list.chromosome_name)
  return _internal_chromosome_name(index);
}
inline void block_list::set_chromosome_name(int index, int32_t value) {
  chromosome_name_.Set(index, value);
  // @@protoc_insertion_point(field_set:MAT.block_list.chromosome_name)
}
inline void block_list::_internal_add_chromosome_name(int32_t value) {
  chromosome_name_.Add(value);
}
inline void block_list::add_chromosome_name(int32_t value) {
  _internal_add_chromosome_name(value);
  // @@protoc_insertion_point(field_add:MAT.block_list.chromosome_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_list::_internal_chromosome_name() const {
  return chromosome_name_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
block_list::chromosome_name() const {
  // @@protoc_insertion_point(field_list:MAT.block_list.chromosome_name)
  return _internal_chromosome_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_list::_internal_mutable_chromosome_name() {
  return &chromosome_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
block_list::mutable_chromosome_name() {
  // @@protoc_insertion_point(field_mutable_list:MAT.block_list.chromosome_name)
  return _internal_mutable_chromosome_name();
}

// -------------------------------------------------------------------

// gap_list

// repeated int32 position = 1;
inline int gap_list::_internal_position_size() const {
  return position_.size();
}
inline int gap_list::position_size() const {
  return _internal_position_size();
}
inline void gap_list::clear_position() {
  position_.Clear();
}
inline int32_t gap_list::_internal_position(int index) const {
  return position_.Get(index);
}
inline int32_t gap_list::position(int index) const {
  // @@protoc_insertion_point(field_get:MAT.gap_list.position)
  return _internal_position(index);
}
inline void gap_list::set_position(int index, int32_t value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:MAT.gap_list.position)
}
inline void gap_list::_internal_add_position(int32_t value) {
  position_.Add(value);
}
inline void gap_list::add_position(int32_t value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:MAT.gap_list.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
gap_list::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
gap_list::position() const {
  // @@protoc_insertion_point(field_list:MAT.gap_list.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
gap_list::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
gap_list::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:MAT.gap_list.position)
  return _internal_mutable_position();
}

// repeated int32 condensed = 2;
inline int gap_list::_internal_condensed_size() const {
  return condensed_.size();
}
inline int gap_list::condensed_size() const {
  return _internal_condensed_size();
}
inline void gap_list::clear_condensed() {
  condensed_.Clear();
}
inline int32_t gap_list::_internal_condensed(int index) const {
  return condensed_.Get(index);
}
inline int32_t gap_list::condensed(int index) const {
  // @@protoc_insertion_point(field_get:MAT.gap_list.condensed)
  return _internal_condensed(index);
}
inline void gap_list::set_condensed(int index, int32_t value) {
  condensed_.Set(index, value);
  // @@protoc_insertion_point(field_set:MAT.gap_list.condensed)
}
inline void gap_list::_internal_add_condensed(int32_t value) {
  condensed_.Add(value);
}
inline void gap_list::add_condensed(int32_t value) {
  _internal_add_condensed(value);
  // @@protoc_insertion_point(field_add:MAT.gap_list.condensed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
gap_list::_internal_condensed() const {
  return condensed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
gap_list::condensed() const {
  // @@protoc_insertion_point(field_list:MAT.gap_list.condensed)
  return _internal_condensed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
gap_list::_internal_mutable_condensed() {
  return &condensed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
gap_list::mutable_condensed() {
  // @@protoc_insertion_point(field_mutable_list:MAT.gap_list.condensed)
  return _internal_mutable_condensed();
}

// -------------------------------------------------------------------

// tree

// string newick = 1;
inline void tree::clear_newick() {
  newick_.ClearToEmpty();
}
inline const std::string& tree::newick() const {
  // @@protoc_insertion_point(field_get:MAT.tree.newick)
  return _internal_newick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void tree::set_newick(ArgT0&& arg0, ArgT... args) {
 
 newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MAT.tree.newick)
}
inline std::string* tree::mutable_newick() {
  std::string* _s = _internal_mutable_newick();
  // @@protoc_insertion_point(field_mutable:MAT.tree.newick)
  return _s;
}
inline const std::string& tree::_internal_newick() const {
  return newick_.Get();
}
inline void tree::_internal_set_newick(const std::string& value) {
  
  newick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* tree::_internal_mutable_newick() {
  
  return newick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* tree::release_newick() {
  // @@protoc_insertion_point(field_release:MAT.tree.newick)
  return newick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void tree::set_allocated_newick(std::string* newick) {
  if (newick != nullptr) {
    
  } else {
    
  }
  newick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newick,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (newick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    newick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MAT.tree.newick)
}

// repeated .MAT.node nodes = 2;
inline int tree::_internal_nodes_size() const {
  return nodes_.size();
}
inline int tree::nodes_size() const {
  return _internal_nodes_size();
}
inline void tree::clear_nodes() {
  nodes_.Clear();
}
inline ::MAT::node* tree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:MAT.tree.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::node >*
tree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:MAT.tree.nodes)
  return &nodes_;
}
inline const ::MAT::node& tree::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::MAT::node& tree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:MAT.tree.nodes)
  return _internal_nodes(index);
}
inline ::MAT::node* tree::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::MAT::node* tree::add_nodes() {
  ::MAT::node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:MAT.tree.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MAT::node >&
tree::nodes() const {
  // @@protoc_insertion_point(field_list:MAT.tree.nodes)
  return nodes_;
}

// .MAT.gap_list gaps = 3;
inline bool tree::_internal_has_gaps() const {
  return this != internal_default_instance() && gaps_ != nullptr;
}
inline bool tree::has_gaps() const {
  return _internal_has_gaps();
}
inline void tree::clear_gaps() {
  if (GetArenaForAllocation() == nullptr && gaps_ != nullptr) {
    delete gaps_;
  }
  gaps_ = nullptr;
}
inline const ::MAT::gap_list& tree::_internal_gaps() const {
  const ::MAT::gap_list* p = gaps_;
  return p != nullptr ? *p : reinterpret_cast<const ::MAT::gap_list&>(
      ::MAT::_gap_list_default_instance_);
}
inline const ::MAT::gap_list& tree::gaps() const {
  // @@protoc_insertion_point(field_get:MAT.tree.gaps)
  return _internal_gaps();
}
inline void tree::unsafe_arena_set_allocated_gaps(
    ::MAT::gap_list* gaps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gaps_);
  }
  gaps_ = gaps;
  if (gaps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MAT.tree.gaps)
}
inline ::MAT::gap_list* tree::release_gaps() {
  
  ::MAT::gap_list* temp = gaps_;
  gaps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MAT::gap_list* tree::unsafe_arena_release_gaps() {
  // @@protoc_insertion_point(field_release:MAT.tree.gaps)
  
  ::MAT::gap_list* temp = gaps_;
  gaps_ = nullptr;
  return temp;
}
inline ::MAT::gap_list* tree::_internal_mutable_gaps() {
  
  if (gaps_ == nullptr) {
    auto* p = CreateMaybeMessage<::MAT::gap_list>(GetArenaForAllocation());
    gaps_ = p;
  }
  return gaps_;
}
inline ::MAT::gap_list* tree::mutable_gaps() {
  ::MAT::gap_list* _msg = _internal_mutable_gaps();
  // @@protoc_insertion_point(field_mutable:MAT.tree.gaps)
  return _msg;
}
inline void tree::set_allocated_gaps(::MAT::gap_list* gaps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gaps_;
  }
  if (gaps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MAT::gap_list>::GetOwningArena(gaps);
    if (message_arena != submessage_arena) {
      gaps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gaps, submessage_arena);
    }
    
  } else {
    
  }
  gaps_ = gaps;
  // @@protoc_insertion_point(field_set_allocated:MAT.tree.gaps)
}

// .MAT.block_list blocks = 4;
inline bool tree::_internal_has_blocks() const {
  return this != internal_default_instance() && blocks_ != nullptr;
}
inline bool tree::has_blocks() const {
  return _internal_has_blocks();
}
inline void tree::clear_blocks() {
  if (GetArenaForAllocation() == nullptr && blocks_ != nullptr) {
    delete blocks_;
  }
  blocks_ = nullptr;
}
inline const ::MAT::block_list& tree::_internal_blocks() const {
  const ::MAT::block_list* p = blocks_;
  return p != nullptr ? *p : reinterpret_cast<const ::MAT::block_list&>(
      ::MAT::_block_list_default_instance_);
}
inline const ::MAT::block_list& tree::blocks() const {
  // @@protoc_insertion_point(field_get:MAT.tree.blocks)
  return _internal_blocks();
}
inline void tree::unsafe_arena_set_allocated_blocks(
    ::MAT::block_list* blocks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocks_);
  }
  blocks_ = blocks;
  if (blocks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MAT.tree.blocks)
}
inline ::MAT::block_list* tree::release_blocks() {
  
  ::MAT::block_list* temp = blocks_;
  blocks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MAT::block_list* tree::unsafe_arena_release_blocks() {
  // @@protoc_insertion_point(field_release:MAT.tree.blocks)
  
  ::MAT::block_list* temp = blocks_;
  blocks_ = nullptr;
  return temp;
}
inline ::MAT::block_list* tree::_internal_mutable_blocks() {
  
  if (blocks_ == nullptr) {
    auto* p = CreateMaybeMessage<::MAT::block_list>(GetArenaForAllocation());
    blocks_ = p;
  }
  return blocks_;
}
inline ::MAT::block_list* tree::mutable_blocks() {
  ::MAT::block_list* _msg = _internal_mutable_blocks();
  // @@protoc_insertion_point(field_mutable:MAT.tree.blocks)
  return _msg;
}
inline void tree::set_allocated_blocks(::MAT::block_list* blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete blocks_;
  }
  if (blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MAT::block_list>::GetOwningArena(blocks);
    if (message_arena != submessage_arena) {
      blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocks, submessage_arena);
    }
    
  } else {
    
  }
  blocks_ = blocks;
  // @@protoc_insertion_point(field_set_allocated:MAT.tree.blocks)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MAT

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mutation_5fannotation_2eproto
