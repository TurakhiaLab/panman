{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to PanMAN Wiki","text":""},{"location":"index.html#introduction","title":"Introduction","text":""},{"location":"index.html#what-are-panmans","title":"What are PanMANs?","text":"<p>PanMAN or Pangenome Mutation-Annotated Network is a novel data representation for pangenomes that provides massive leaps in both representative power and storage efficiency. Specifically, PanMANs are composed of mutation-annotated trees, called PanMATs, which, in addition to substitutions, also annotate inferred indels (Fig. 2b), and even structural mutations (Fig. 2a) on the different branches. Multiple PanMATs are connected in the form of a network using edges to generate a PanMAN (Fig. 2c). PanMAN's representative power is compared against existing pangenomic formats in Fig. 1. PanMANs are the most compressible pangenomic format for the different microbial datasets (SARS-CoV-2, RSV, HIV, Mycobacterium. Tuberculosis, E. Coli, and Klebsiella pneumoniae), providing 2.9 to 559-fold compression over standard pangenomic formats. </p> Figure 1: Comparison of representative power of PanMAN against other pangenomic formats (yellow ticks indicate partial representative ability) <p> </p> Figure 2: Overview of the PanMAN data structure"},{"location":"index.html#panmans-protocol-buffer-file-format","title":"PanMAN's Protocol Buffer file format","text":"<p>PanMAN utilizes Google\u2019s protocol buffer (protobuf, https://protobuf.dev/), a binary serialization file format, to compactly store PanMAN's data structure in a file. Fig. 3 provides the .proto file defining the PanMAN\u2019s structure. At the top level, the file format of PanMANs encodes a list (declared as a repeated identifier in the .protof file) of PanMATs. Each PanMAT object stores the following data elements: (a) a unique identifier, (b) a phylogenetic tree stored as a string in Newick format, (c) a list of mutations on each branch ordered according to the pre-order traversal of the tree topology, (d) a block mapping object to record homologous segments identified as duplications and rearrangements, which are mapped against their common consensus sequence; the block-mapping object is also used to derive the pseudo-root, e) a gap list to store the position and length of gaps corresponding to each block's consensus sequence. Each mutation object encodes the node's block and nucleotide mutations that are inferred on the branches leading to that node. If a block mutation exists at a position described by the Block-ID field (int32), the block mutation field (bool) is set to 1, otherwise set to 0, and its type is stored as a substitution to and from a gap in Block mutation type field (bool), encoded as 0 or 1, respectively. In PanMAN, each nucleotide mutation within a block inferred on a branch has four pieces of information, i.e., position (middle coordinate), gap position (last coordinate), mutation type, and mutated characters. To reduce redundancy in the file, consecutive mutations of the same type are packed together and stored as a mutation info (int32) field, where mutation type, mutation length, and mutated characters use 3, 5, and 24 bits, respectively. PanMAN stores each character using one-hot encoding, hence, one \"Nucleotide Mutations\" object can store up to 6 consecutive mutations of the same type. PanMAN's file also stores the complex mutation object to encode the type of complex mutation and its metadata such as PanMATs' and nodes' identifiers, breakpoint coordinates, etc. The entire file is then compressed using XZ (https://github.com/tukaani-project/xz) to enhance storage efficiency.</p> Figure 3: PanMAN's file format"},{"location":"index.html#panmanutils","title":"panmanUtils","text":"<p>panmanUtils includes multiple algorithms to construct PanMANs and to support various functionalities to modify and extract useful information from PanMANs (Fig. 4). </p> Figure 4:  Overview of panmanUtils' functionalities"},{"location":"index.html#video-tutorial","title":"Video Tutorial","text":""},{"location":"index.html#panmanutils-installation-methods","title":"panmanUtils Installation Methods","text":"<p>panmanUtils software can be installed using four different methods:</p> <ol> <li>Conda (Recommended) </li> <li>Docker Image</li> <li>Dockerfile</li> <li>Installation scripts </li> </ol>"},{"location":"index.html#1-using-conda-recommended","title":"1. Using conda (recommended)","text":"<p>Users can install panmanUtils through installation of panman conda package, compatible with <code>linux-64</code> and <code>osx-64</code>. For modern macs using Apple silicon (arm64), you need to install Rosetta 2.</p>"},{"location":"index.html#i-dependencies","title":"i. Dependencies","text":"<ol> <li>Conda</li> </ol>"},{"location":"index.html#ii-install-panman-conda-package","title":"ii. Install panman conda package","text":"<pre><code># Create and activate a new environment for panman\nconda create -n panman-env python=3.11 -y\nconda activate panman-env\n\n# Set up channels\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\n# On macOS ARM:\n# conda config --env --set subdir osx-64\n\n# Install the panman package\nconda install panman -y\n</code></pre>"},{"location":"index.html#iii-run-panmanutils","title":"iii. Run panmanUtils","text":"<pre><code>panmanUtils --help\n</code></pre>"},{"location":"index.html#2-using-docker-image","title":"2. Using Docker Image","text":"<p>To use panmanUtils in a docker container, users can create a docker container from a docker image, by following these steps (compatible with <code>linux-64</code> and <code>osx-64</code>).</p>"},{"location":"index.html#i-dependencies_1","title":"i. Dependencies","text":"<ol> <li>Docker</li> </ol>"},{"location":"index.html#ii-pull-and-build-the-panman-docker-image-from-dockerhub","title":"ii. Pull and build the PanMAN docker image from DockerHub","text":"<pre><code>## Note: If the Docker image already exists locally, make sure to pull the latest version using \n## docker pull swalia14/panman:latest\n\n## If the Docker image does not exist locally, the following command will pull and run the latest version\ndocker run -it swalia14/panman:latest\n</code></pre>"},{"location":"index.html#iii-run-panmanutils_1","title":"iii. Run panmanUtils","text":"<pre><code># Insider docker container\npanmanUtils --help\n</code></pre> <p>Note</p> <p>The docker image comes with preinstalled panmanUtils and other tools such as PanGraph, PGGB, and RIVET.</p>"},{"location":"index.html#3-using-dockerfile","title":"3. Using DockerFile","text":"<p>Docker container with preinstalled panmanUtils can also be built from DockerFile by following these steps (compatible with <code>linux-64</code> and <code>osx-64</code>).</p>"},{"location":"index.html#i-dependencies_2","title":"i. Dependencies","text":"<ol> <li>Docker</li> <li>Git</li> </ol>"},{"location":"index.html#ii-clone-the-repository-and-build-a-docker-image","title":"ii. Clone the repository and build a docker image","text":"<pre><code>git clone https://github.com/TurakhiaLab/panman.git\ncd panman/docker\ndocker build -t panman .\n</code></pre>"},{"location":"index.html#iii-build-and-run-the-docker-container","title":"iii. Build and run the docker container","text":"<pre><code>docker run -it panman\n</code></pre>"},{"location":"index.html#iv-run-panmanutils","title":"iv. Run panmanUtils","text":"<pre><code># Insider docker container\npanmanUtils --help\n</code></pre>"},{"location":"index.html#4-using-installation-script-least-recommended","title":"4. Using installation script (Least recommended)","text":"<p>We provide scripts to install panmanUtils from source code (requires <code>sudo</code> access, compatible with <code>Linux</code> only). <code>Mac</code> users can use MacOS specific installation script, that uses <code>conda</code> to install panmanUtils.</p>"},{"location":"index.html#1-dependencies","title":"1. Dependencies","text":"<ol> <li>Git</li> </ol>"},{"location":"index.html#2-clone-the-repository","title":"2. Clone the repository","text":"<pre><code>git clone https://github.com/TurakhiaLab/panman.git\ncd panman\n</code></pre>"},{"location":"index.html#3-run-the-installation-script","title":"3. Run the installation script","text":"<pre><code>chmod +x install/installationUbuntu.sh\n./install/installationUbuntu.sh\n</code></pre>"},{"location":"index.html#4-run-panmanutils","title":"4. Run panmanUtils","text":"<pre><code>cd build\n./panmanUtils --help\n</code></pre> <p>Note</p> <p>panmanUtils is built using CMake and depends upon libraries such as Boost, cap'n proto, etc, which are also installed in <code>installationUbuntu.sh</code>. If users face version issues, try using the conda or docker methods detailed above.</p> <p></p>"},{"location":"index.html#panman-construction","title":"PanMAN Construction","text":"<p>Here, we will learn to build PanMAN from various input formats.</p> <p>Step 0: The Steps below require panmanUtils, if not done so far, refer to installation guide to install panmanUtils. To check if panmanUtils is properly installed or not, run the following command, and it should execute without error <pre><code>panmanUtils --help\n</code></pre></p>"},{"location":"index.html#building-panman-from-alignments-pangraphgfamsa","title":"Building PanMAN from Alignments (PanGraph/GFA/MSA)","text":""},{"location":"index.html#building-panman-from-pangraph","title":"Building PanMAN from PanGraph","text":"<p>Step 1: Check if <code>sars_20.json</code> and <code>sars_20.nwk</code> files exist in <code>test</code> directory. Alternatively, users can provide custom PanGraph (JSON) and tree topology (Newick format) files to build a panman. </p> <p>Step 2: Run panmanUtils with the following command to build a panman from PanGraph:</p> <p><pre><code>panmanUtils -P $PANMAN_HOME/test/sars_20.json -N $PANMAN_HOME/test/sars_20.nwk -o sars_20\n</code></pre> The above command will run panmanUtils program and build <code>sars_20.panman</code> in <code>$PANMAN_HOME/build/panman</code> directory.</p>"},{"location":"index.html#building-panman-from-gfa","title":"Building PanMAN from GFA","text":"<p>Step 1: Check if <code>sars_20.gfa</code> and <code>sars_20.nwk</code> files exist in <code>test</code> directory. Alternatively, users can provide custom GFA and tree topology (Newick format) files to build a panman. </p> <p>Step 2: Run panmanUtils with the following command to build a panman from GFA:</p> <p><pre><code>panmanUtils -G $PANMAN_HOME/test/sars_20.gfa -N $PANMAN_HOME/test/sars_20.nwk -o sars_20\n</code></pre> The above command will run panmanUtils program and build <code>sars_20.panman</code> in <code>$PANMAN_HOME/build/panman</code> directory.</p>"},{"location":"index.html#building-panman-from-msa-fasta-format","title":"Building PanMAN from MSA (FASTA format)","text":"<p>Step 1: Check if <code>sars_20.msa</code> and <code>sars_20.nwk</code> files exist in <code>test</code> directory. Alternatively, users can provide custom MSA (FASTA format) and tree topology (Newick format) files to build a panman. </p> <p>Step 2: Run panmanUtils to build a panman from GFA using the following commands:</p> <p><pre><code>panmanUtils -M $PANMAN_HOME/test/sars_20.msa -N $PANMAN_HOME/test/sars_20.nwk -o sars_20\n</code></pre> The above command will run panmanUtils program and build <code>sars_20.panman</code> in <code>$PANMAN_HOME/build/panman</code> directory.</p>"},{"location":"index.html#building-panman-from-raw-genome-sequences-or-fragment-assemblies-using-snakemake-workflow","title":"Building PanMAN from raw genome sequences or fragment assemblies using Snakemake Workflow","text":"<p>We provide a Snakemake workflow to construct PanMANs from raw sequences (FASTA format) or from fragment assemblies.</p> <p>Note</p> <p>The Snakemake workflow uses various tools such as PanGraph tool, PGGB, MAFFT, and MashTree to build input PanGraph, GFA, MSA, and Tree topology files, respectively and it is particularly designed to be used in the docker container build from either the provided docker image or the DockerFile (instructions provided here).</p>"},{"location":"index.html#building-panman-from-raw-genome-sequences","title":"Building PanMAN from raw genome sequences","text":"<p>Step 1: Run the following command to construct a panman from raw sequences.</p> <pre><code>cd $PANMAN_HOME/workflows\nsnakemake --use-conda --cores 8 --config RUNTYPE=\"pangraph/gfa/msa\" FASTA=\"[user_input]\" SEQ_COUNT=\"Number of sequences\" ASSEM=\"NONE\" REF=\"NONE\" TARGET=\"NONE\"\n</code></pre>"},{"location":"index.html#building-panman-from-fragment-assemblies","title":"Building PanMAN from fragment assemblies","text":"<p>Step 1: Run the following command to construct a panman from fragment assemblies.</p> <p><pre><code>cd $PANMAN_HOME/workflows\nsnakemake --use-conda --cores 8 --config RUNTYPE=\"pangraph/gfa/msa\" FASTA=\"None\" SEQ_COUNT=\"Number of sequences\" ASSEM=\"frag\" REF=\"reference_file\" TARGET=\"target.txt\"\n</code></pre> Here, target.txt includes a list of files that contain the fragmented assemblies.</p>"},{"location":"index.html#exploring-utilities-in-panmanutils","title":"Exploring utilities in panmanUtils","text":"<p>Here, we will learn to use various functionalities provided in panmanUtils software for downstream applications in epidemiological, microbiological, metagenomic, ecological, and evolutionary studies.</p> <p>Step 0: The Steps below require panmanUtils and a PanMAN. We provide a pre-built panman (<code>sars_20.panman</code>), otherwise, refer to installation guide to install panmanUtils and construction instructions to build a PanMAN. </p>"},{"location":"index.html#functionalities-in-panmanutils","title":"Functionalities in panmanUtils","text":"<p>All panmanUtils functionality commands manipulate the input PanMAN file. <pre><code>cd $PANMAN_HOME/build\npanmanUtils -I &lt;path to PanMAN file&gt; {opt}\n</code></pre> </p> Table 1: List of functionalities supported by panmanUtils Option Description <code>-I</code>, <code>--input-panman</code> Input PanMAN file path <code>-s</code>, <code>--summary</code> Print PanMAN summary <code>-t</code>, <code>--newick</code> Print Newick string of all trees in a PanMAN <code>-f</code>, <code>--fasta</code> Print tip/internal sequences (FASTA format) <code>-m</code>, <code>--fasta-aligned</code> Print MSA of sequences for each PanMAT in a PanMAN (FASTA format) <code>-b</code>, <code>--subnet</code> Extract subnet of given PanMAN to a new PanMAN file based on the list of nodes provided in the input file <code>-v</code>, <code>--vcf</code> Print variations of all sequences from any PanMAT in a PanMAN (VCF format) <code>-g</code>, <code>--gfa</code> Convert any PanMAT in a PanMAN to a GFA file <code>-w</code>, <code>--maf</code> Print m-WGA for each PanMAT in a PanMAN (MAF format) <code>-a</code>, <code>--annotate</code> Annotate nodes of the input PanMAN based on the list provided in the input file <code>-r</code>, <code>--reroot</code> Reroot a PanMAT in a PanMAN based on the input sequence id (<code>--reference</code>) <code>-v</code>, <code>--aa-translation</code> Extract amino acid translations in tsv file <code>-e</code>, <code>--extended-newick</code> Print PanMAN's network in extended-newick format <code>-k</code>, <code>--create-network</code> Create PanMAN with network of trees from single or multiple PanMAN files <code>-p</code>, <code>--printMutations</code> Create PanMAN with network of trees from single or multiple PanMAN files <code>-q</code>, <code>--acr</code> ACR method <code>[fitch(default), mppa]</code> <code>-n</code>, <code>--reference</code> Identifier of reference sequence for PanMAN construction (optional), VCF extract (required), or reroot (required) <code>-s</code>, <code>--start</code> Start coordinate of protein translation <code>-e</code>, <code>--end</code> End coordinate of protein translation <code>-d</code>, <code>--treeID</code> Tree ID, required for <code>--vcf</code> <code>-i</code>, <code>--input-file</code> Path to the input file, required for <code>--subnet</code>, <code>--annotate</code>, and <code>--create-network</code> <code>-o</code>, <code>--output-file</code> Prefix of the output file name <code>-V</code>, <code>--version</code> panmanUtils Version <p>Important: When output-file argument is optional and is not provided to panmanUtils, the output will be printed in the terminal.</p> <p>Note</p> <p>For all the examples below, <code>sars_20.panman</code> will be used as input panman. Alternatively, users can provide custom build panman using the instructions provided here.</p> <p>Note</p> <p>Users can reduce memory consumption by lowering the number of CPU threads (default set to 32) through the --threads option in panmanUtils, at a cost of higher latency.</p>"},{"location":"index.html#summary-extract","title":"Summary extract","text":"<p>The summary feature extracts node and tree level statistics of a PanMAN, that contains a summary of its geometric and parsimony information.</p> <ul> <li>Usage Syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --summary --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman  --summary --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#newick-extract","title":"Newick extract","text":"<p>Extract Newick string of all trees in a PanMAN.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --newick --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --newick --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#extended-newick-extract","title":"Extended Newick extract","text":"<p>Extract network in Extended Newick format.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --extended-newick --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --extended-newick --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#tipinternal-node-sequences-extract","title":"Tip/internal node sequences extract","text":"<p>Extract tip and internal node sequences from a PanMAN in a FASTA format.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --fasta --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --fasta --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#multiple-sequence-alignment-msa-extract","title":"Multiple Sequence Alignment (MSA) extract","text":"<p>Extract the MSA of sequences for each PanMAT (with pseudo-root  coordinates) in a PanMAN in a FASTA format.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --fasta-aligned --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --fasta-aligned --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#multiple-whole-genome-alignment-m-wga-extract","title":"Multiple Whole Genome Alignment (m-WGA) extract","text":"<p>Extract m-WGA for each PanMAT in a PanMAN in the form of a UCSC multiple alignment format (MAF).</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --maf --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --maf --output-file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#variant-call-format-vcf-extract","title":"Variant Call Format (VCF) extract","text":"<p>Extract variations of all sequences from any PanMAT in a PanMAN in the form of a VCF file with respect to any reference sequence (ref) in the PanMAT.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --vcf -reference=ref --output-file=&lt;prefix of output file&gt; (optional) \n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --vcf -reference=\"Switzerland/SO-ETHZ-500145/2020|OU000199.2|2020-11-12\" --output-file=sars_20 \n</code></pre></li> </ul>"},{"location":"index.html#graphical-fragment-assembly-gfa-extract","title":"Graphical fragment assembly (GFA) extract","text":"<p>Convert any PanMAT in a PanMAN to a Graphical fragment assembly (GFA) file representing the pangenome.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --gfa --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --gfa --output-file=sars_20 \n</code></pre></li> </ul>"},{"location":"index.html#subnetwork-extract","title":"Subnetwork extract","text":"<p>Extract a subnetwork from a given PanMAN and write it to a new PanMAN file based on the list of nodes provided in the input-file.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --subnet --input-file=&lt;path to a file containing list of nodes&gt; --output-file=&lt;prefix of output file&gt;\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --subnet --input-file=nodes.txt --output-file=sars_20_subnet\n</code></pre></li> </ul>"},{"location":"index.html#annotate","title":"Annotate","text":"<p>Annotate nodes in a PanMAN with a custom string, later searched by these annotations, using an input TSV file containing a list of nodes and their corresponding custom annotations. </p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --annotate --input-file=&lt;path to file containing list of annotations&gt; --output-file=sars_20_annotate\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --annotate --input-file=annotations.tsv --output-file=sars_20_annotate\n</code></pre> <p>NOTE: If output-file is not provided to panmanUtils, the annotated PanMAN will be written to the same file.</p> </li> </ul>"},{"location":"index.html#amino-acid-translation","title":"Amino Acid Translation","text":"<p>Extract amino acid translations from a PanMAN in a TSV file.</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --aa-translations --output-file=&lt;prefix of output file&gt; (optional)\n</code></pre></li> <li>Example <pre><code>panmanUtils -I panman/sars_20.panman --aa-translations --output_file=sars_20\n</code></pre></li> </ul>"},{"location":"index.html#range-query","title":"Range Query","text":"<p>panmanUtils allow extracting alignment of all the sequences of a single PanMAT in a PanMAN (FASTA format) with respect to a user-defined reference sequence between positions [start:end]</p> <ul> <li>Usage syntax <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --index no -x start -y end --reference=&lt;ref sequence name&gt;\n</code></pre></li> <li>Example <pre><code>panmanUtils -I &lt;path to PanMAN file&gt; --index no -x 10 -y 100 --reference=\"Switzerland/SO-ETHZ-500145/2020|OU000199.2|2020-11-12\"\n</code></pre></li> </ul>"},{"location":"index.html#panmanutils-interactive-mode","title":"panmanUtils Interactive mode","text":"<p>Step 1: Users can enter panmanUtils's interactive mode by passing input panman as input using the following command:</p> <pre><code>panmanUtils -I &lt;path to PanMAN file&gt;\n## Example\npanmanUtils -I panman/sars_20.panman\n</code></pre> <p>Note</p> <p>The interactive mode should look like the image attached below</p> <p></p> <p>Step 2: Use the commands listed in Table 1 to perform desired operation</p>"},{"location":"index.html#contributions","title":"Contributions","text":"<p>We welcome contributions from the community to enhance the capabilities of PanMAN and panmanUtils. If you encounter any issues or have suggestions for improvement, please open an issue on PanMAN GitHub page. For general inquiries and support, reach out to our team.</p>"},{"location":"index.html#citing-panman","title":"Citing PanMAN","text":"<p>If you use the PanMANs or panmanUtils in your research or publications, we kindly request that you cite the following paper:  * Sumit Walia, Harsh Motwani, Kyle Smith, Russell Corbett-Detig, Yatish Turakhia, \"Compressive Pangenomics Using Mutation-Annotated Networks\", bioRxiv 2024.07.02.601807; doi: 10.1101/2024.07.02.601807</p>"}]}